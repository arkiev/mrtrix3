#This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

# For deployment, it will be necessary to create a PyPI API token and store it as a secret
# https://docs.github.com/en/actions/reference/encrypted-secrets

name: Pydra

on:
  push:
    branches: [ master ]
    tags: [ '*' ]
  pull_request:
    branches:
      - master
      - dev

jobs:

  generate-pydra:

    runs-on: ubuntu-latest

    env:
      CFLAGS: -Werror
      QT_SELECT: qt5
      SCCACHE_GHA_ENABLED: "true"
      SCCACHE_CACHE_SIZE: "2G"
      CXX_COMPILER_LAUNCHER: sccache

    steps:
      - uses: actions/checkout@v1

      - name: Install MRtrix dependencies
        run: |
          sudo apt-get update
          sudo apt-get install clang libqt5opengl5-dev libqt5svg5-dev libglvnd-dev libeigen3-dev zlib1g-dev libfftw3-dev 
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.3
      - name: Configure MRtrix
        run: ./configure -assert || { cat configure.log; false; }
      - name: Build MRtrix
        run: ./build -nowarnings -persistent -nopaginate || { cat build.log; false; }
      - name: Set PATH Variable
        run: echo "PATH=$PATH:$(pwd)/bin" >> $GITHUB_ENV
      - name: Set LD_LIBRARY_PATH Variable
        run: echo "LD_LIBRARY_PATH=$(pwd)/lib" >> $GITHUB_ENV        
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install Python build dependencies
        run: |
          python -m pip install --upgrade pip
      - name: Install pydra-auto-gen requirements
        run: |
          pip install -r pydra/requirements.txt
      - name: Generate task specifications
        run: |
          python pydra/pydra-auto-gen.py
      - name: Upload auto-gen pydra
        uses: actions/upload-artifact@v2
        with:
          name: AutoGen
          path: pydra/src/pydra/tasks/mrtrix3/latest

  devcheck:
    needs: [generate-pydra]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.11]  # Check oldest and newest versions
        pip-flags: ['', '--editable']
        pydra:
        - 'pydra'
        - '--editable git+https://github.com/nipype/pydra.git#egg=pydra'

    steps:
    - uses: actions/checkout@v2
    - name: Download auto-gen pydra
      uses: actions/download-artifact@v2
      with:
        name: AutoGen
        path: pydra/src/pydra/tasks/mrtrix3/latest
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
    - name: Install Pydra
      run: |
        pip install ${{ matrix.pydra }}
        python -c "import pydra as m; print(f'{m.__name__} {m.__version__} @ {m.__file__}')"
    - name: Install task package
      run: |
        pip install ${{ matrix.pip-flags }} "pydra/src[dev]"
        python -c "import pydra.tasks.mrtrix3 as m; print(f'{m.__name__} {m.__version__} @ {m.__file__}')"
        python -c "import pydra as m; print(f'{m.__name__} {m.__version__} @ {m.__file__}')"

  # test:
  #   needs: [generate]
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version: [3.8, 3.11]
  #   defaults:
  #     run:
  #       shell: bash -l {0}
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Install Minconda
  #     uses: conda-incubator/setup-miniconda@v2
  #     with:
  #       auto-activate-base: true
  #       activate-environment: ""
  #   - name: Install MRtrix via Conda
  #     run: |
  #       conda install -c mrtrix3 mrtrix3
  #       mrconvert --version
  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: ${{ matrix.python-version }}
  #   - name: Install build dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #   - name: Install task package
  #     run: |
  #       pip install ".[test]"
  #       python -c "import pydra.tasks.mrtrix3 as m; print(f'{m.__name__} {m.__version__} @ {m.__file__}')"
  #       python -c "import pydra as m; print(f'{m.__name__} {m.__version__} @ {m.__file__}')"
  #   - name: Test with pytest
  #     run: |
  #       pytest -sv --doctest-modules pydra/tasks/mrtrix3 \
  #           --cov pydra.tasks.mrtrix3 --cov-report xml
  #   - uses: codecov/codecov-action@v1
  #     if: ${{ always() }}


  deploy:
    needs: [devcheck] # , test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    steps:
    - uses: actions/checkout@v2
    - name: Download auto-gen pydra
      uses: actions/download-artifact@v2
      with:
        name: AutoGen
        path: pydra/src/pydra/tasks/mrtrix3/latest    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install build tools
      run: python -m pip install --upgrade pip twine build
    - name: Build source and wheel distributions
      working-directory: ./pydra/src
      run: python -m build
    - name: Check distributions
      run: twine check pydra/src/dist/*
    - name: Upload sdist
      uses: actions/upload-artifact@v2
      with:
        name: SDist
        path: pydra/src/dist/*.tar.gz
    # Deploy on tags if PYPI_API_TOKEN is defined in the repository secrets.
    # Secrets are not accessible in the if: condition [0], so set an output variable [1]
    # [0] https://github.community/t/16928
    # [1] https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-output-parameter
    - name: Check for PyPI token on tag
      id: deployable
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      env:
        PYPI_API_TOKEN: "${{ secrets.PYPI_API_TOKEN }}"
      run: if [ -n "$PYPI_API_TOKEN" ]; then echo ::set-output name=DEPLOY::true; fi
    - name: Upload to PyPI
      if: steps.deployable.outputs.DEPLOY
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: pydra/src/dist/
